DROP TABLE period CASCADE CONSTRAINTS;
DROP TABLE relife CASCADE CONSTRAINTS;
DROP TABLE classType CASCADE CONSTRAINTS;
DROP TABLE event CASCADE CONSTRAINTS;
DROP TABLE class CASCADE CONSTRAINTS;
DROP TABLE timetable CASCADE CONSTRAINTS;
DROP TABLE admin CASCADE CONSTRAINTS;
DROP TABLE attendance CASCADE CONSTRAINTS;
DROP TABLE subject CASCADE CONSTRAINTS;
DROP TABLE halfDay CASCADE CONSTRAINTS;
DROP TABLE shortLeave CASCADE CONSTRAINTS;
DROP TABLE teacher CASCADE CONSTRAINTS;
DROP TABLE classTeacher CASCADE CONSTRAINTS;
DROP TABLE subjectTeacher CASCADE CONSTRAINTS;
DROP TABLE classSubject CASCADE CONSTRAINTS;
DROP TABLE eventTimetable CASCADE CONSTRAINTS;
DROP TABLE relifeClass CASCADE CONSTRAINTS;
DROP TABLE admin;


select * from classType;

TRUNCATE table class;

---------------------------------------Table Creation ---------------------------------------------
CREATE TABLE admin (
    adminID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    userName VARCHAR2(100),
    email VARCHAR2(100),
    password VARCHAR2(100),
    contactNO VARCHAR2(15),
    city VARCHAR2(100),
    school VARCHAR2(100)
);


CREATE TABLE relife (
    relifeID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100)
);

CREATE TABLE attendance (
    userID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    fingerPrint BLOB,
    status VARCHAR2(100),
    attendance_date DATE,
    attendance_time TIMESTAMP
);


CREATE TABLE class (
    classID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    adminID NUMBER,
    FOREIGN KEY (adminID) REFERENCES admin(adminID)
);


CREATE TABLE event (
    eventID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    event_date DATE,
    event_time TIMESTAMP,
    classID NUMBER,
    adminID NUMBER,
    FOREIGN KEY (classID) REFERENCES class(classID),
    FOREIGN KEY (adminID) REFERENCES admin(adminID)
);

CREATE TABLE classType (
    classTypeID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    classID NUMBER,
    FOREIGN KEY (classID) REFERENCES class(classID)
);

CREATE TABLE teacher (
    teacherID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    primarySubject VARCHAR2(100),
    secondarySubject VARCHAR2(100),
    age VARCHAR2(100),
    timetableID NUMBER,
    adminID NUMBER,
    halfDayID NUMBER,
    shortLeaveID NUMBER,
    userID NUMBER);
    

-- Add foreign key for timetableID
ALTER TABLE teacher
ADD CONSTRAINT fk_timetableID
    FOREIGN KEY (timetableID) REFERENCES timetable(timetableID);

-- Add foreign key for halfDayID
ALTER TABLE teacher
ADD CONSTRAINT fk_halfDayID
    FOREIGN KEY (halfDayID) REFERENCES halfDay(halfDayID);

-- Add foreign key for shortLeaveID
ALTER TABLE teacher
ADD CONSTRAINT fk_shortLeaveID
    FOREIGN KEY (shortLeaveID) REFERENCES shortLeave(shortLeaveID);

-- Add foreign key for userID
ALTER TABLE teacher
ADD CONSTRAINT fk_userID
    FOREIGN KEY (userID) REFERENCES attendance(userID);

    
CREATE TABLE shortLeave (
    shortLeaveID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    shortLeave_time TIMESTAMP,
    shortLeave_date DATE,
    userID NUMBER,
    FOREIGN KEY (userID) REFERENCES teacher(teacherID)
);

CREATE TABLE halfDay (
    halfDayID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    halfDay_date DATE,
    halfDay_time TIMESTAMP,
    userID NUMBER,
    FOREIGN KEY (userID) REFERENCES teacher(teacherID)
);

CREATE TABLE subject (
    subjectID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    subject_time TIMESTAMP,
    subject_date DATE,
    userID NUMBER,
    FOREIGN KEY (userID) REFERENCES teacher(teacherID)
);


CREATE TABLE classSubject (
    subjectID NUMBER,
    classID NUMBER,
    PRIMARY KEY (subjectID, classID),
    FOREIGN KEY (subjectID) REFERENCES subject(subjectID),
    FOREIGN KEY (classID) REFERENCES class(classID)
);


CREATE TABLE subjectTeacher (
    subjectID NUMBER,
    teacherID NUMBER,
    PRIMARY KEY (subjectID, teacherID),
    FOREIGN KEY (subjectID) REFERENCES subject(subjectID),
    FOREIGN KEY (teacherID) REFERENCES teacher(teacherID)
);


CREATE TABLE classTeacher (
    classID NUMBER,
    teacherID NUMBER,
    PRIMARY KEY (classID, teacherID),
    FOREIGN KEY (classID) REFERENCES class(classID),
    FOREIGN KEY (teacherID) REFERENCES teacher(teacherID)
);

CREATE TABLE timetable (
    timetableID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    classID NUMBER,
    FOREIGN KEY (classID) REFERENCES class(classID)
);

CREATE TABLE eventTimetable (
    eventID NUMBER,
    timetableID NUMBER,
    eventTimetable_date DATE,
    PRIMARY KEY (timetableID, eventID),
    FOREIGN KEY (eventID) REFERENCES event(eventID),
    FOREIGN KEY (timetableID) REFERENCES timetable(timetableID)
);

CREATE TABLE relifeClass (
    classID NUMBER,
    relifeID NUMBER,
    relifeClass_date DATE,
    relifeClass_time TIMESTAMP,
    PRIMARY KEY (classID, relifeID),
    FOREIGN KEY (classID) REFERENCES class(classID),
    FOREIGN KEY (relifeID) REFERENCES relife(relifeID)
);


CREATE TABLE period (
    periodID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100),
    time TIMESTAMP,
    timetableID NUMBER,
    FOREIGN KEY (timetableID) REFERENCES timetable(timetableID)
);


---------------------------------------Test Insertion ---------------------------------------------


INSERT INTO admin (userName, email, password, contactNO, city, school) VALUES 
('admin1', 'admin1@example.com', 'pass123', '1234567890', 'City1', 'SchoolA');
('admin2', 'admin2@example.com', 'pass123', '1234567891', 'City2', 'SchoolB');

INSERT INTO relife (name) 
VALUES 
('Relife5');

INSERT INTO attendance (fingerPrint, status, attendance_date, attendance_time) VALUES
--(EMPTY_BLOB(), 'Present', TO_DATE('2024-10-09', 'YYYY-MM-DD'), SYSTIMESTAMP);
--(EMPTY_BLOB(), 'Absent', TO_DATE('2024-10-09', 'YYYY-MM-DD'), SYSTIMESTAMP);
--(EMPTY_BLOB(), 'Present', TO_DATE('2024-10-09', 'YYYY-MM-DD'), SYSTIMESTAMP);
--(EMPTY_BLOB(), 'Late', TO_DATE('2024-10-09', 'YYYY-MM-DD'), SYSTIMESTAMP);
(EMPTY_BLOB(), 'Present', TO_DATE('2024-10-09', 'YYYY-MM-DD'), SYSTIMESTAMP);

INSERT INTO class (name, adminID) 
VALUES ('ClassA', 1);
INSERT INTO class (name, adminID) 
VALUES ('ClassB', 2);
INSERT INTO class (name, adminID) 
VALUES ('ClassC', 1); -- Adjusted adminID to 1 or 2 since you mentioned there are only 2 adminIDs
INSERT INTO class (name, adminID) 
VALUES ('ClassD', 2);
INSERT INTO class (name, adminID) 
VALUES ('ClassE', 1); -- Adjusted adminID to 1 or 2



INSERT INTO event (name, event_date, event_time, classID, adminID) 
VALUES ('Event1', TO_DATE('2024-10-10', 'YYYY-MM-DD'), SYSTIMESTAMP, 1, 1);
INSERT INTO event (name, event_date, event_time, classID, adminID) 
VALUES ('Event2', TO_DATE('2024-10-11', 'YYYY-MM-DD'), SYSTIMESTAMP, 2, 2);
INSERT INTO event (name, event_date, event_time, classID, adminID) 
VALUES ('Event3', TO_DATE('2024-10-12', 'YYYY-MM-DD'), SYSTIMESTAMP, 3, 1);
INSERT INTO event (name, event_date, event_time, classID, adminID) 
VALUES ('Event4', TO_DATE('2024-10-13', 'YYYY-MM-DD'), SYSTIMESTAMP, 4, 2);
INSERT INTO event (name, event_date, event_time, classID, adminID) 
VALUES ('Event5', TO_DATE('2024-10-14', 'YYYY-MM-DD'), SYSTIMESTAMP, 5, 1);


INSERT INTO timetable (name, classID) 
VALUES ('Timetable1', 1);
INSERT INTO timetable (name, classID) 
VALUES ('Timetable2', 2);
INSERT INTO timetable (name, classID) 
VALUES ('Timetable3', 3);
INSERT INTO timetable (name, classID) 
VALUES ('Timetable4', 4);
INSERT INTO timetable (name, classID) 
VALUES ('Timetable5', 5);




INSERT INTO teacher (name, primarySubject, secondarySubject, age, adminID) 
VALUES ('Teacher1', 'Math', 'Science', '35', 1);
INSERT INTO teacher (name, primarySubject, secondarySubject, age, adminID) 
VALUES ('Teacher2', 'English', 'History', '40', 2);
INSERT INTO teacher (name, primarySubject, secondarySubject, age, adminID) 
VALUES ('Teacher3', 'Physics', 'Chemistry', '30', 1);
INSERT INTO teacher (name, primarySubject, secondarySubject, age, adminID) 
VALUES ('Teacher4', 'Biology', 'Math', '45', 2);
INSERT INTO teacher (name, primarySubject, secondarySubject, age, adminID) 
VALUES ('Teacher5', 'Computer', 'Physics', '28', 1);

UPDATE teacher 
SET userID = 1 
WHERE name = 'Teacher1';

UPDATE teacher 
SET userID = 2 
WHERE name = 'Teacher2';

UPDATE teacher 
SET userID = 3 
WHERE name = 'Teacher3';

UPDATE teacher 
SET userID = 4 
WHERE name = 'Teacher4';

UPDATE teacher 
SET userID = 5 
WHERE name = 'Teacher5';



select * from teacher;




INSERT INTO shortLeave (shortLeave_time, shortLeave_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-09', 'YYYY-MM-DD'), 1);
INSERT INTO shortLeave (shortLeave_time, shortLeave_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-10', 'YYYY-MM-DD'), 2);
INSERT INTO shortLeave (shortLeave_time, shortLeave_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-11', 'YYYY-MM-DD'), 3);
INSERT INTO shortLeave (shortLeave_time, shortLeave_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-12', 'YYYY-MM-DD'), 4);
INSERT INTO shortLeave (shortLeave_time, shortLeave_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-13', 'YYYY-MM-DD'), 5);



INSERT INTO halfDay (halfDay_date, halfDay_time, userID) 
VALUES (TO_DATE('2024-10-09', 'YYYY-MM-DD'), SYSTIMESTAMP, 1);
INSERT INTO halfDay (halfDay_date, halfDay_time, userID) 
VALUES (TO_DATE('2024-10-10', 'YYYY-MM-DD'), SYSTIMESTAMP, 2);
INSERT INTO halfDay (halfDay_date, halfDay_time, userID) 
VALUES (TO_DATE('2024-10-11', 'YYYY-MM-DD'), SYSTIMESTAMP, 3);
INSERT INTO halfDay (halfDay_date, halfDay_time, userID) 
VALUES (TO_DATE('2024-10-12', 'YYYY-MM-DD'), SYSTIMESTAMP, 4);
INSERT INTO halfDay (halfDay_date, halfDay_time, userID) 
VALUES (TO_DATE('2024-10-13', 'YYYY-MM-DD'), SYSTIMESTAMP, 5);

INSERT INTO subject (subject_time, subject_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-09', 'YYYY-MM-DD'), 1);
INSERT INTO subject (subject_time, subject_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-10', 'YYYY-MM-DD'), 2);
INSERT INTO subject (subject_time, subject_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-11', 'YYYY-MM-DD'), 3);
INSERT INTO subject (subject_time, subject_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-12', 'YYYY-MM-DD'), 4);
INSERT INTO subject (subject_time, subject_date, userID) 
VALUES (SYSTIMESTAMP, TO_DATE('2024-10-13', 'YYYY-MM-DD'), 5);


INSERT INTO classSubject (subjectID, classID) 
VALUES (1, 1);
INSERT INTO classSubject (subjectID, classID) 
VALUES (2, 2);
INSERT INTO classSubject (subjectID, classID) 
VALUES (3, 3);
INSERT INTO classSubject (subjectID, classID) 
VALUES (4, 4);
INSERT INTO classSubject (subjectID, classID) 
VALUES (5, 5);


INSERT INTO subjectTeacher (subjectID, teacherID) 
VALUES (1, 1);
INSERT INTO subjectTeacher (subjectID, teacherID) 
VALUES (2, 2);
INSERT INTO subjectTeacher (subjectID, teacherID) 
VALUES (3, 3);
INSERT INTO subjectTeacher (subjectID, teacherID) 
VALUES (4, 4);
INSERT INTO subjectTeacher (subjectID, teacherID) 
VALUES (5, 5);


INSERT INTO classTeacher (classID, teacherID) 
VALUES (1, 1);
INSERT INTO classTeacher (classID, teacherID) 
VALUES (2, 2);
INSERT INTO classTeacher (classID, teacherID) 
VALUES (3, 3);
INSERT INTO classTeacher (classID, teacherID) 
VALUES (4, 4);
INSERT INTO classTeacher (classID, teacherID) 
VALUES (5, 5);

INSERT INTO timetable (name, classID) 
VALUES ('Timetable1', 1);
INSERT INTO timetable (name, classID) 
VALUES ('Timetable2', 2);
INSERT INTO timetable (name, classID) 
VALUES ('Timetable3', 3);
INSERT INTO timetable (name, classID) 
VALUES ('Timetable4', 4);
INSERT INTO timetable (name, classID) 
VALUES ('Timetable5', 5);



INSERT INTO eventTimetable (eventID, timetableID, eventTimetable_date) 
VALUES (1, 1, TO_DATE('2024-10-09', 'YYYY-MM-DD'));
INSERT INTO eventTimetable (eventID, timetableID, eventTimetable_date) 
VALUES (2, 2, TO_DATE('2024-10-10', 'YYYY-MM-DD'));
INSERT INTO eventTimetable (eventID, timetableID, eventTimetable_date) 
VALUES (6, 3, TO_DATE('2024-10-11', 'YYYY-MM-DD'));
INSERT INTO eventTimetable (eventID, timetableID, eventTimetable_date) 
VALUES (7, 4, TO_DATE('2024-10-12', 'YYYY-MM-DD'));
INSERT INTO eventTimetable (eventID, timetableID, eventTimetable_date) 
VALUES (9, 5, TO_DATE('2024-10-13', 'YYYY-MM-DD'));

INSERT INTO relifeClass (classID, relifeID, relifeClass_date, relifeClass_time) 
VALUES (1, 1, TO_DATE('2024-10-09', 'YYYY-MM-DD'), SYSTIMESTAMP);
INSERT INTO relifeClass (classID, relifeID, relifeClass_date, relifeClass_time) 
VALUES (2, 2, TO_DATE('2024-10-10', 'YYYY-MM-DD'), SYSTIMESTAMP);
INSERT INTO relifeClass (classID, relifeID, relifeClass_date, relifeClass_time) 
VALUES (3, 3, TO_DATE('2024-10-11', 'YYYY-MM-DD'), SYSTIMESTAMP);
INSERT INTO relifeClass (classID, relifeID, relifeClass_date, relifeClass_time) 
VALUES (4, 4, TO_DATE('2024-10-12', 'YYYY-MM-DD'), SYSTIMESTAMP);
INSERT INTO relifeClass (classID, relifeID, relifeClass_date, relifeClass_time) 
VALUES (5, 5, TO_DATE('2024-10-13', 'YYYY-MM-DD'), SYSTIMESTAMP);

INSERT INTO period (name, time, timetableID) 
VALUES ('Period1', SYSTIMESTAMP, 1);
INSERT INTO period (name, time, timetableID) 
VALUES ('Period2', SYSTIMESTAMP, 2);
INSERT INTO period (name, time, timetableID) 
VALUES ('Period3', SYSTIMESTAMP, 3);
INSERT INTO period (name, time, timetableID) 
VALUES ('Period4', SYSTIMESTAMP, 4);
INSERT INTO period (name, time, timetableID) 
VALUES ('Period5', SYSTIMESTAMP, 5);

select * from period;
select * from class;

select * from admin;

---------------------------------------CRUD for all Table ---------------------------------------------

                                        
                                 ------Admin CRUD ---------
                                    
--admin insert--
CREATE OR REPLACE PROCEDURE insert_admin (
    p_userName   IN admin.userName%TYPE,
    p_email      IN admin.email%TYPE,
    p_password   IN admin.password%TYPE,
    p_contactNO  IN admin.contactNO%TYPE,
    p_city       IN admin.city%TYPE,
    p_school     IN admin.school%TYPE
) IS
BEGIN
    INSERT INTO admin (userName, email, password, contactNO, city, school)
    VALUES (p_userName, p_email, p_password, p_contactNO, p_city, p_school);
    
    COMMIT;
END;
/
--calling Insert_admin procedure---
BEGIN
    insert_admin('Rizan', 'Insaf@example.com', 'password1234', '0777035108', 'Colombo', 'St.Jhone School');
END;
/
select * from admin;
--admin Update--
CREATE OR REPLACE PROCEDURE update_admin_by_id (
    p_adminID    IN admin.adminID%TYPE,
    p_userName   IN admin.userName%TYPE,
    p_email      IN admin.email%TYPE,
    p_contactNO  IN admin.contactNO%TYPE,
    p_city       IN admin.city%TYPE,
    p_school     IN admin.school%TYPE
) IS
BEGIN
    UPDATE admin
    SET userName = p_userName,
        email = p_email,
        contactNO = p_contactNO,
        city = p_city,
        school = p_school
    WHERE adminID = p_adminID;
    
    COMMIT;
END;
/

--calling update_admin_by_id procedure---
BEGIN
    update_admin_by_id(1, 'JohnUpdated', 'john_updated@example.com', '0987654321', 'Los Angeles', 'XYZ School');
END;
/



--admin Delete--
CREATE OR REPLACE PROCEDURE delete_admin_by_id (
    p_adminID IN admin.adminID%TYPE
) IS
BEGIN
    DELETE FROM admin
    WHERE adminID = p_adminID;
    
    COMMIT;
END;
/
--calling delete_admin_by_id procedure---
BEGIN
    delete_admin_by_id(2);  -- Replace 1 with the actual admin ID you want to delete
END;
/


--Admin SELECT ---
set serveroutput on;
CREATE OR REPLACE PROCEDURE select_admin_cursor IS
    -- Declare a cursor to select all admin records
    CURSOR admin_cursor IS
        SELECT adminID, userName, email, contactNO, city, school
        FROM admin;
        
    -- Variables to hold the data fetched by the cursor
    v_adminID admin.adminID%TYPE;
    v_userName admin.userName%TYPE;
    v_email admin.email%TYPE;
    v_contactNO admin.contactNO%TYPE;
    v_city admin.city%TYPE;
    v_school admin.school%TYPE;

BEGIN
    -- Open the cursor and fetch each row
    OPEN admin_cursor;
    LOOP
        -- Fetch the next row into the variables
        FETCH admin_cursor INTO v_adminID, v_userName, v_email, v_contactNO, v_city, v_school;
        
        -- Exit when no more rows are found
        EXIT WHEN admin_cursor%NOTFOUND;
        
        -- Output the fetched data (you can modify the output as per your needs)
        DBMS_OUTPUT.PUT_LINE('ID: ' || v_adminID || ', Name: ' || v_userName || 
                             ', Email: ' || v_email || ', Contact: ' || v_contactNO || 
                             ', City: ' || v_city || ', School: ' || v_school);
    END LOOP;
    
    -- Close the cursor
    CLOSE admin_cursor;
END;
/

--calling select_admin_cursor procedure---
SET SERVEROUTPUT ON;
BEGIN
    select_admin_cursor;
END;
/


                                    --------------Teacher CRUD-------------


------Insert Teacher-------------- 


CREATE OR REPLACE PROCEDURE insert_teacher (
    p_name IN teacher.name%TYPE,
    p_primarySubject IN teacher.primarySubject%TYPE,
    p_secondarySubject IN teacher.secondarySubject%TYPE,
    p_age IN teacher.age%TYPE,
    p_timetableID IN teacher.timetableID%TYPE,
    p_adminID IN teacher.adminID%TYPE,
    p_halfDayID IN teacher.halfDayID%TYPE,
    p_shortLeaveID IN teacher.shortLeaveID%TYPE,
    p_userID IN teacher.userID%TYPE
) IS
BEGIN
    INSERT INTO teacher (name, primarySubject, secondarySubject, age, timetableID, adminID, halfDayID, shortLeaveID, userID)
    VALUES (p_name, p_primarySubject, p_secondarySubject, p_age, p_timetableID, p_adminID, p_halfDayID, p_shortLeaveID, p_userID);
    
    COMMIT;
END;
/

--calling insert_teacher procedure---
BEGIN
    insert_teacher('John Doe', 'Math', 'Science', '35', 1, 1, 1, 1, 1);  -- Example values
END;
/
select * from teacher;



------Update Teacher-------------- 

CREATE OR REPLACE PROCEDURE update_teacher (
    p_teacherID IN teacher.teacherID%TYPE,
    p_name IN teacher.name%TYPE,
    p_primarySubject IN teacher.primarySubject%TYPE,
    p_secondarySubject IN teacher.secondarySubject%TYPE,
    p_age IN teacher.age%TYPE,
    p_timetableID IN teacher.timetableID%TYPE,
    p_adminID IN teacher.adminID%TYPE,
    p_halfDayID IN teacher.halfDayID%TYPE,
    p_shortLeaveID IN teacher.shortLeaveID%TYPE,
    p_userID IN teacher.userID%TYPE
) IS
BEGIN
    UPDATE teacher
    SET name = p_name,
        primarySubject = p_primarySubject,
        secondarySubject = p_secondarySubject,
        age = p_age,
        timetableID = p_timetableID,
        adminID = p_adminID,
        halfDayID = p_halfDayID,
        shortLeaveID = p_shortLeaveID,
        userID = p_userID
    WHERE teacherID = p_teacherID;
    
    COMMIT;
END;
/

--calling update_teacher procedure---
BEGIN
    update_teacher(1, 'John Smith', 'English', 'History', '40', 1, 1,1 , 1, 1);  -- Replace with actual values
END;
/
select * from teacher;

------Delete Teacher-------------- 
CREATE OR REPLACE PROCEDURE delete_teacher (
    p_teacherID IN teacher.teacherID%TYPE
) IS
BEGIN
    DELETE FROM teacher
    WHERE teacherID = p_teacherID;
    
    COMMIT;
END;
/

--calling delete_teacher procedure---
BEGIN
    delete_teacher(21);  -- Replace 1 with the actual teacherID to delete
END;
/
select * from teacher;


------select Teacher-------------- 

CREATE OR REPLACE PROCEDURE select_teacher (
    p_teacherID IN VARCHAR2  -- Allows passing either a specific teacher ID or "all"
) IS
    CURSOR teacher_cursor IS  -- Cursor to fetch all teacher data
        SELECT teacherID, name, primarySubject, secondarySubject, age, timetableID, adminID, halfDayID, shortLeaveID, userID 
        FROM teacher;

    v_teacherID teacher.teacherID%TYPE;
    v_name teacher.name%TYPE;
    v_primarySubject teacher.primarySubject%TYPE;
    v_secondarySubject teacher.secondarySubject%TYPE;
    v_age teacher.age%TYPE;
    v_timetableID teacher.timetableID%TYPE;
    v_adminID teacher.adminID%TYPE;
    v_halfDayID teacher.halfDayID%TYPE;
    v_shortLeaveID teacher.shortLeaveID%TYPE;
    v_userID teacher.userID%TYPE;

BEGIN
    IF p_teacherID = 'all' THEN
        -- If "all" is entered, fetch and display all records
        OPEN teacher_cursor;
        LOOP
            FETCH teacher_cursor INTO v_teacherID, v_name, v_primarySubject, v_secondarySubject, v_age, v_timetableID, v_adminID, v_halfDayID, v_shortLeaveID, v_userID;
            EXIT WHEN teacher_cursor%NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE('Teacher ID: ' || v_teacherID || ', Name: ' || v_name || ', Primary Subject: ' || v_primarySubject);
        END LOOP;
        CLOSE teacher_cursor;
        
    ELSE
        -- If a specific ID is entered, fetch and display only the corresponding record
        BEGIN
            SELECT teacherID, name, primarySubject, secondarySubject, age, timetableID, adminID, halfDayID, shortLeaveID, userID 
            INTO v_teacherID, v_name, v_primarySubject, v_secondarySubject, v_age, v_timetableID, v_adminID, v_halfDayID, v_shortLeaveID, v_userID
            FROM teacher
            WHERE teacherID = TO_NUMBER(p_teacherID);
            
            DBMS_OUTPUT.PUT_LINE('Teacher ID: ' || v_teacherID || ', Name: ' || v_name || ', Primary Subject: ' || v_primarySubject);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No teacher found with the given ID.');
        END;
    END IF;
END;
/

--calling select_teacher procedure---
SET SERVEROUTPUT ON;
BEGIN
    select_teacher('1'); --can enter id /all to display
END;
/


                        -----------------Class CRUD----------------------------------

------Insert Class-------------- 

CREATE OR REPLACE PROCEDURE insert_class (
    p_name IN class.name%TYPE,
    p_adminID IN class.adminID%TYPE
) IS
BEGIN
    INSERT INTO class (name, adminID)
    VALUES (p_name, p_adminID);

    COMMIT;
END;
/

------Callin insert_class PROCEDURE------------- 

BEGIN
    insert_class('Mathematics', 1);  -- Replace with actual values for the class name and adminID
END;
/
select * from class;


------Update Relife-------------- 

CREATE OR REPLACE PROCEDURE update_class (
    p_classID IN class.classID%TYPE,
    p_name IN class.name%TYPE,
    p_adminID IN class.adminID%TYPE
) IS
BEGIN
    UPDATE class
    SET name = p_name,
        adminID = p_adminID
    WHERE classID = p_classID;

    COMMIT;
END;
/

------Callin update_class PROCEDURE------------

BEGIN
    update_class(1, 'Physics', 1);  -- Replace with actual values for classID, name, and adminID
END;
/
select * from class;

------Delete Relife-------------- 

CREATE OR REPLACE PROCEDURE delete_class (
    p_classID IN class.classID%TYPE
) IS
BEGIN
    DELETE FROM class
    WHERE classID = p_classID;

    COMMIT;
END;
/

------Callin delete_class PROCEDURE------------

BEGIN
    delete_class(21);  -- Replace 1 with the actual classID you want to delete
END;
/
select * from class;

------select class-------------- 

CREATE OR REPLACE PROCEDURE select_class (
    p_search IN VARCHAR2  -- Allows passing a classID, name, or "all"
) IS
    CURSOR class_cursor IS  -- Cursor to fetch all class data
        SELECT classID, name, adminID FROM class;

    v_classID class.classID%TYPE;
    v_name class.name%TYPE;
    v_adminID class.adminID%TYPE;

BEGIN
    -- If "all" is entered, fetch and display all records
    IF p_search = 'all' THEN
        OPEN class_cursor;
        LOOP
            FETCH class_cursor INTO v_classID, v_name, v_adminID;
            EXIT WHEN class_cursor%NOTFOUND;
            
            DBMS_OUTPUT.PUT_LINE('Class ID: ' || v_classID || ', Name: ' || v_name || ', Admin ID: ' || v_adminID);
        END LOOP;
        CLOSE class_cursor;
    
    -- Check if the input is numeric (i.e., a classID)
    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            -- Fetch and display the record by classID
            SELECT classID, name, adminID 
            INTO v_classID, v_name, v_adminID
            FROM class
            WHERE classID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Class ID: ' || v_classID || ', Name: ' || v_name || ', Admin ID: ' || v_adminID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No class found with the given ID.');
        END;

    -- Otherwise, assume the input is a class name
    ELSE
        BEGIN
            -- Fetch and display the record by class name
            SELECT classID, name, adminID 
            INTO v_classID, v_name, v_adminID
            FROM class
            WHERE name = p_search;
            
            DBMS_OUTPUT.PUT_LINE('Class ID: ' || v_classID || ', Name: ' || v_name || ', Admin ID: ' || v_adminID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No class found with the given name.');
        END;
    END IF;
END;
/

------Callin select_class PROCEDURE------------
SET SERVEROUTPUT ON;
BEGIN
    select_class('all'); 
END;
/


                        ----------------Relife CRUD-------------------

------Insert Relife-------------- 

CREATE OR REPLACE PROCEDURE insert_relife (
    p_name IN relife.name%TYPE
) IS
BEGIN
    INSERT INTO relife (name) 
    VALUES (p_name);
    
    COMMIT;
END;
/

------Callin insert_relife PROCEDURE------------- 
BEGIN
    insert_relife('New Name one');  -- Replace 'New Name' with actual value
END;
/
select * from relife;

------Update Relife-------------- 

CREATE OR REPLACE PROCEDURE update_relife (
    p_relifeID IN relife.relifeID%TYPE,   -- Correct column name
    p_name IN relife.name%TYPE
) IS
BEGIN
    UPDATE relife
    SET name = p_name
    WHERE relifeID = p_relifeID;          -- Correct column name
    
    COMMIT;
END;
/

------Callin update_relife PROCEDURE------------ 
BEGIN
    update_relife(1, 'Updated Name');  -- Replace 1 with the actual ID and 'Updated Name' with new name
END;
/
select * from relife;


------Delete Relife-------------- 

CREATE OR REPLACE PROCEDURE delete_relife (
    p_relifeID IN relife.relifeID%TYPE   -- Correct column name
) IS
BEGIN
    DELETE FROM relife
    WHERE relifeID = p_relifeID;          -- Correct column name
    
    COMMIT;
END;
/

------Callin delete_relife PROCEDURE------------- 

BEGIN
    delete_relife(22);  -- Replace 1 with the actual ID of the record to delete
END;
/
select * from relife;


------Select from cursor Relife-------------- 

CREATE OR REPLACE PROCEDURE select_relife_cursor IS
    -- Declare a cursor to select all records from the relife table
    CURSOR relife_cursor IS
        SELECT relifeID, name FROM relife;

    -- Variables to store the fetched data
    v_relifeID relife.relifeID %TYPE;
    v_name relife.name%TYPE;

BEGIN
    -- Open the cursor and fetch rows
    OPEN relife_cursor;
    LOOP
        FETCH relife_cursor INTO v_relifeID, v_name;
        EXIT WHEN relife_cursor%NOTFOUND;
        
        -- Output the fetched data
        DBMS_OUTPUT.PUT_LINE('ID: ' || v_relifeID || ', Name: ' || v_name);
    END LOOP;
    
    -- Close the cursor
    CLOSE relife_cursor;
END;
/

---caling select_relife_cursor procedar ------
set serveroutput on;
BEGIN
    select_relife_cursor;
END;
/

-----------------------------------------Event CRUD----------------------------------



------Insert Event-------------- 

CREATE OR REPLACE PROCEDURE insert_event (
            p_name IN event.name%TYPE,
            p_event_date IN event.event_date%TYPE ,                       
            p_event_time IN event.event_time%TYPE,
            p_classid IN event.classid%TYPE,
            p_adminid IN event.adminid%TYPE) IS
            
BEGIN 
    Insert into event(name,event_date,event_time,classid,adminid)
    values (p_name,p_event_date,p_event_time,p_classid,p_adminid);
    
    COMMIT;
    
END;


---caling insert_event procedar -----

BEGIN
    insert_event('Science Fair', TO_DATE('2024-10-10', 'YYYY-MM-DD'), TO_TIMESTAMP('10:30:00', 'HH24:MI:SS'), 1, 1);  
END;
/

------Update Event-------------- 

CREATE OR REPLACE PROCEDURE update_event (
            p_eventid IN event.eventid%TYPE,
            p_name IN event.name%TYPE,
            p_event_date IN event.event_date%TYPE ,                       
            p_event_time IN event.event_time%TYPE,
            p_classid IN event.classid%TYPE,
            p_adminid IN event.adminid%TYPE) IS
BEGIN           
            UPDATE event SET name=p_name,event_date = p_event_date,event_time=p_event_time,classid=p_classid, 
             adminid=p_adminid WHERE eventid=p_eventid;
END;

---caling update_event procedar -----

BEGIN
    update_event(21,'ENGLISH',TO_DATE('2024-10-10', 'YYYY-MM-DD'),SYSTIMESTAMP,1,1);
END;

select * from event;

------Delete Event-------------- 

CREATE OR REPLACE PROCEDURE delete_event(
                p_eventid IN event.eventid%TYPE) IS
BEGIN
        DELETE FROM event WHERE eventid = P_eventid;
END;

            
---caling delete_event procedar -----

BEGIN
        delete_event(21);
END;



--------Select Event--------------


CREATE OR REPLACE PROCEDURE select_event (
    p_search IN VARCHAR2  -- Allows passing an eventID, event name, or "all"
) IS
    CURSOR event_cursor IS
        SELECT eventID, name, event_date, event_time, classID, adminID FROM event;

    v_eventID event.eventID%TYPE;
    v_name event.name%TYPE;
    v_event_date event.event_date%TYPE;
    v_event_time event.event_time%TYPE;
    v_classID event.classID%TYPE;
    v_adminID event.adminID%TYPE;

BEGIN
    -- Fetch all records if "all" is passed
    IF p_search = 'all' THEN
        OPEN event_cursor;
        LOOP
            FETCH event_cursor INTO v_eventID, v_name, v_event_date, v_event_time, v_classID, v_adminID;
            EXIT WHEN event_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Event ID: ' || v_eventID || ', Name: ' || v_name || 
                ', Date: ' || v_event_date || ', Time: ' || v_event_time || 
                ', Class ID: ' || v_classID || ', Admin ID: ' || v_adminID);
        END LOOP;
        CLOSE event_cursor;

    -- If numeric input, search by eventID
    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT eventID, name, event_date, event_time, classID, adminID 
            INTO v_eventID, v_name, v_event_date, v_event_time, v_classID, v_adminID
            FROM event
            WHERE eventID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Event ID: ' || v_eventID || ', Name: ' || v_name || 
                ', Date: ' || v_event_date || ', Time: ' || v_event_time || 
                ', Class ID: ' || v_classID || ', Admin ID: ' || v_adminID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No event found with the given ID.');
        END;
    
    -- Otherwise, search by event name
    ELSE
        BEGIN
            SELECT eventID, name, event_date, event_time, classID, adminID 
            INTO v_eventID, v_name, v_event_date, v_event_time, v_classID, v_adminID
            FROM event
            WHERE name = p_search;
            
            DBMS_OUTPUT.PUT_LINE('Event ID: ' || v_eventID || ', Name: ' || v_name || 
                ', Date: ' || v_event_date || ', Time: ' || v_event_time || 
                ', Class ID: ' || v_classID || ', Admin ID: ' || v_adminID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No event found with the given name.');
        END;
    END IF;
END;
/

---caling select_event procedar -----

BEGIN
    select_event('1');
END;
/

                            -------------------------ClassType CRUD----------------------------------



--------Insert Event--------------

CREATE OR REPLACE PROCEDURE insert_classType (
    p_name IN classType.name%TYPE,
    p_classID IN classType.classID%TYPE
) IS
BEGIN
    INSERT INTO classType (name, classID)
    VALUES (p_name, p_classID);
    
    COMMIT;
END;
/


---caling insert_classType procedar -----

BEGIN
    insert_classType('Math Class', 1);  -- Inserts a classType named 'Math Class' for classID = 1
END;
/


--------Update Event--------------

CREATE OR REPLACE PROCEDURE update_classType (
    p_classTypeID IN classType.classTypeID%TYPE,
    p_name IN classType.name%TYPE,
    p_classID IN classType.classID%TYPE
) IS
BEGIN
    UPDATE classType
    SET name = p_name,
        classID = p_classID
    WHERE classTypeID = p_classTypeID;

    COMMIT;
END;
/

---caling update_classType procedar -----

BEGIN
    update_classType(3, 'Science Class', 2);  -- Updates classType with classTypeID = 1
END;
/


--------Delete Event--------------

CREATE OR REPLACE PROCEDURE delete_classType (
    p_classTypeID IN classType.classTypeID%TYPE
) IS
BEGIN
    DELETE FROM classType
    WHERE classTypeID = p_classTypeID;

    COMMIT;
END;
/

---caling delete_classType procedar -----


BEGIN
    delete_classType(21);  -- Deletes the classType with classTypeID = 1
END;
/
SELECT * FROM classType;

--------Select Event--------------


CREATE OR REPLACE PROCEDURE select_classType (
    p_search IN VARCHAR2  -- Allows passing classTypeID, classType name, or "all"
) IS
    CURSOR classType_cursor IS
        SELECT classTypeID, name, classID FROM classType;

    v_classTypeID classType.classTypeID%TYPE;
    v_name classType.name%TYPE;
    v_classID classType.classID%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN classType_cursor;
        LOOP
            FETCH classType_cursor INTO v_classTypeID, v_name, v_classID;
            EXIT WHEN classType_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('ClassType ID: ' || v_classTypeID || ', Name: ' || v_name || ', Class ID: ' || v_classID);
        END LOOP;
        CLOSE classType_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT classTypeID, name, classID 
            INTO v_classTypeID, v_name, v_classID
            FROM classType
            WHERE classTypeID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('ClassType ID: ' || v_classTypeID || ', Name: ' || v_name || ', Class ID: ' || v_classID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No classType found with the given ID.');
        END;

    ELSE
        BEGIN
            SELECT classTypeID, name, classID
            INTO v_classTypeID, v_name, v_classID
            FROM classType
            WHERE name = p_search;
            
            DBMS_OUTPUT.PUT_LINE('ClassType ID: ' || v_classTypeID || ', Name: ' || v_name || ', Class ID: ' || v_classID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No classType found with the given name.');
        END;
    END IF;
END;
/

---caling select_classType procedar -----
SET SERVEROUTPUT ON;
BEGIN
    select_classType('all'); --all/id/name
END;
/


                               -------------------------subject  CRUD----------------------------------
                               
                               
                               
                               
------Insert subject-------------- 

CREATE OR REPLACE PROCEDURE insert_subject (
    p_subject_time IN subject.subject_time%TYPE,
    p_subject_date IN subject.subject_date%TYPE,
    p_userID IN subject.userID%TYPE
) IS
BEGIN
    INSERT INTO subject (subject_time, subject_date, userID)
    VALUES (p_subject_time, p_subject_date, p_userID);
    
    COMMIT;
END;
/
---caling insert_subject procedar -----

BEGIN
    insert_subject(SYSTIMESTAMP, SYSDATE, 1);  -- Inserts a subject with current time and date for teacherID = 1
END;
/

                               
------Update subject-------------- 

CREATE OR REPLACE PROCEDURE update_subject (
    p_subjectID IN subject.subjectID%TYPE,
    p_subject_time IN subject.subject_time%TYPE,
    p_subject_date IN subject.subject_date%TYPE,
    p_userID IN subject.userID%TYPE
) IS
BEGIN
    UPDATE subject
    SET subject_time = p_subject_time,
        subject_date = p_subject_date,
        userID = p_userID
    WHERE subjectID = p_subjectID;

    COMMIT;
END;
/


---caling select_classType procedar -----

BEGIN
    update_subject(1, SYSTIMESTAMP, SYSDATE, 2);  -- Updates subject with subjectID = 1
END;
/


------Delete subject-------------- 

CREATE OR REPLACE PROCEDURE delete_subject (
    p_subjectID IN subject.subjectID%TYPE
) IS
BEGIN
    DELETE FROM subject
    WHERE subjectID = p_subjectID;

    COMMIT;
END;
/

---caling delete_subject procedar -----

BEGIN
    delete_subject(21);  -- Deletes the subject with subjectID = 1
END;
/
select * from subject;


------Select subject-------------- 

CREATE OR REPLACE PROCEDURE select_subject (
    p_search IN VARCHAR2
) IS
    CURSOR subject_cursor IS
        SELECT subjectID, subject_time, subject_date, userID FROM subject;

    v_subjectID subject.subjectID%TYPE;
    v_subject_time subject.subject_time%TYPE;
    v_subject_date subject.subject_date%TYPE;
    v_userID subject.userID%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN subject_cursor;
        LOOP
            FETCH subject_cursor INTO v_subjectID, v_subject_time, v_subject_date, v_userID;
            EXIT WHEN subject_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Subject ID: ' || v_subjectID || ', Time: ' || v_subject_time || ', Date: ' || v_subject_date || ', User ID: ' || v_userID);
        END LOOP;
        CLOSE subject_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT subjectID, subject_time, subject_date, userID 
            INTO v_subjectID, v_subject_time, v_subject_date, v_userID
            FROM subject
            WHERE subjectID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Subject ID: ' || v_subjectID || ', Time: ' || v_subject_time || ', Date: ' || v_subject_date || ', User ID: ' || v_userID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No subject found with the given ID.');
        END;

    ELSE
        BEGIN
            SELECT subjectID, subject_time, subject_date, userID
            INTO v_subjectID, v_subject_time, v_subject_date, v_userID
            FROM subject
            WHERE subject_date = TO_DATE(p_search, 'YYYY-MM-DD');
            
            DBMS_OUTPUT.PUT_LINE('Subject ID: ' || v_subjectID || ', Time: ' || v_subject_time || ', Date: ' || v_subject_date || ', User ID: ' || v_userID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No subject found with the given date.');
        END;
    END IF;
END;
/

---caling select_subject procedar -----

SET SERVEROUTPUT ON;
BEGIN
    select_subject('2024-10-08'); --all/id/date
END;
/



                               -------------------------Attendance  CRUD----------------------------------
                               
                               
                               
                               
------Insert Attendance-------------- 

CREATE OR REPLACE PROCEDURE insert_attendance (
    p_fingerPrint IN attendance.fingerPrint%TYPE,
    p_status IN attendance.status%TYPE,
    p_attendance_date IN attendance.attendance_date%TYPE,
    p_attendance_time IN attendance.attendance_time%TYPE
) IS
BEGIN
    INSERT INTO attendance (fingerPrint, status, attendance_date, attendance_time)
    VALUES (p_fingerPrint, p_status, p_attendance_date, p_attendance_time);
    
    COMMIT;
END;
/

---caling insert_attendance procedar -----

BEGIN
    insert_attendance(EMPTY_BLOB(), 'Present', SYSDATE, SYSTIMESTAMP); -- Insert with current date and time, and 'Present' status
END;
/
    select * from attendance;                           
------Update Attendance-------------- 

CREATE OR REPLACE PROCEDURE update_attendance (
    p_userID IN attendance.userID%TYPE,
    p_fingerPrint IN attendance.fingerPrint%TYPE,
    p_status IN attendance.status%TYPE,
    p_attendance_date IN attendance.attendance_date%TYPE,
    p_attendance_time IN attendance.attendance_time%TYPE
) IS
BEGIN
    UPDATE attendance
    SET fingerPrint = p_fingerPrint,
        status = p_status,
        attendance_date = p_attendance_date,
        attendance_time = p_attendance_time
    WHERE userID = p_userID;

    COMMIT;
END;
/

---caling update_attendance procedar -----

BEGIN
    update_attendance(1, EMPTY_BLOB(), 'Absent', SYSDATE, SYSTIMESTAMP); -- Update attendance for userID = 1
END;
/



------Delete Attendance-------------- 

CREATE OR REPLACE PROCEDURE delete_attendance (
    p_userID IN attendance.userID%TYPE
) IS
BEGIN
    DELETE FROM attendance
    WHERE userID = p_userID;

    COMMIT;
END;
/

---caling Attendance procedar -----

BEGIN
    delete_attendance(21);  -- Deletes attendance record with userID = 1
END;
/

select * from attendance;


------Select Attendance-------------- 

CREATE OR REPLACE PROCEDURE select_attendance (
    p_search IN VARCHAR2
) IS
    CURSOR attendance_cursor IS
        SELECT userID, status, attendance_date, attendance_time FROM attendance;

    v_userID attendance.userID%TYPE;
    v_status attendance.status%TYPE;
    v_attendance_date attendance.attendance_date%TYPE;
    v_attendance_time attendance.attendance_time%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN attendance_cursor;
        LOOP
            FETCH attendance_cursor INTO v_userID, v_status, v_attendance_date, v_attendance_time;
            EXIT WHEN attendance_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('User ID: ' || v_userID || ', Status: ' || v_status || ', Date: ' || v_attendance_date || ', Time: ' || v_attendance_time);
        END LOOP;
        CLOSE attendance_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT userID, status, attendance_date, attendance_time 
            INTO v_userID, v_status, v_attendance_date, v_attendance_time
            FROM attendance
            WHERE userID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('User ID: ' || v_userID || ', Status: ' || v_status || ', Date: ' || v_attendance_date || ', Time: ' || v_attendance_time);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No attendance found for the given user ID.');
        END;

    ELSE
        BEGIN
            SELECT userID, status, attendance_date, attendance_time
            INTO v_userID, v_status, v_attendance_date, v_attendance_time
            FROM attendance
            WHERE attendance_date = TO_DATE(p_search, 'YYYY-MM-DD');
            
            DBMS_OUTPUT.PUT_LINE('User ID: ' || v_userID || ', Status: ' || v_status || ', Date: ' || v_attendance_date || ', Time: ' || v_attendance_time);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No attendance found for the given date.');
        END;
    END IF;
END;
/


---caling select_attendance procedar -----

SET SERVEROUTPUT ON;
BEGIN
    select_attendance('all');    --all/id/date
END;
/
   


                               -------------------------halfDay  CRUD----------------------------------
                               
                               
                               
                               
------Insert halfDay-------------- 

CREATE OR REPLACE PROCEDURE insert_halfDay (
    p_halfDay_date IN halfDay.halfDay_date%TYPE,
    p_halfDay_time IN halfDay.halfDay_time%TYPE,
    p_userID IN halfDay.userID%TYPE
) IS
BEGIN
    INSERT INTO halfDay (halfDay_date, halfDay_time, userID)
    VALUES (p_halfDay_date, p_halfDay_time, p_userID);

    COMMIT;
END;
/

---caling insert_halfDay procedar -----

BEGIN
    insert_halfDay(SYSDATE, SYSTIMESTAMP, 1);  -- Insert half-day for userID = 1
END;
/

                               
------Update halfDay-------------- 

CREATE OR REPLACE PROCEDURE update_halfDay (
    p_halfDayID IN halfDay.halfDayID%TYPE,
    p_halfDay_date IN halfDay.halfDay_date%TYPE,
    p_halfDay_time IN halfDay.halfDay_time%TYPE,
    p_userID IN halfDay.userID%TYPE
) IS
BEGIN
    UPDATE halfDay
    SET halfDay_date = p_halfDay_date,
        halfDay_time = p_halfDay_time,
        userID = p_userID
    WHERE halfDayID = p_halfDayID;

    COMMIT;
END;
/


---caling update_halfDay procedar -----

BEGIN
    update_halfDay(1, SYSDATE, SYSTIMESTAMP, 1);  -- Update half-day record with halfDayID = 1
END;
/

------Delete halfDay-------------- 

CREATE OR REPLACE PROCEDURE delete_halfDay (
    p_halfDayID IN halfDay.halfDayID%TYPE
) IS
BEGIN
    DELETE FROM halfDay
    WHERE halfDayID = p_halfDayID;

    COMMIT;
END;
/


---caling delete_halfDay procedar -----

BEGIN
    delete_halfDay(21);  -- Delete half-day record with halfDayID = 1
END;
/

select * from halfDay;


------Select halfDay-------------- 

CREATE OR REPLACE PROCEDURE select_halfDay (
    p_search IN VARCHAR2
) IS
    CURSOR halfDay_cursor IS
        SELECT halfDayID, halfDay_date, halfDay_time, userID FROM halfDay;

    v_halfDayID halfDay.halfDayID%TYPE;
    v_halfDay_date halfDay.halfDay_date%TYPE;
    v_halfDay_time halfDay.halfDay_time%TYPE;
    v_userID halfDay.userID%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN halfDay_cursor;
        LOOP
            FETCH halfDay_cursor INTO v_halfDayID, v_halfDay_date, v_halfDay_time, v_userID;
            EXIT WHEN halfDay_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('HalfDay ID: ' || v_halfDayID || ', Date: ' || v_halfDay_date || ', Time: ' || v_halfDay_time || ', UserID: ' || v_userID);
        END LOOP;
        CLOSE halfDay_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT halfDayID, halfDay_date, halfDay_time, userID
            INTO v_halfDayID, v_halfDay_date, v_halfDay_time, v_userID
            FROM halfDay
            WHERE userID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('HalfDay ID: ' || v_halfDayID || ', Date: ' || v_halfDay_date || ', Time: ' || v_halfDay_time || ', UserID: ' || v_userID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No half-day found for the given user ID.');
        END;

    ELSE
        BEGIN
            SELECT halfDayID, halfDay_date, halfDay_time, userID
            INTO v_halfDayID, v_halfDay_date, v_halfDay_time, v_userID
            FROM halfDay
            WHERE halfDay_date = TO_DATE(p_search, 'YYYY-MM-DD');
            
            DBMS_OUTPUT.PUT_LINE('HalfDay ID: ' || v_halfDayID || ', Date: ' || v_halfDay_date || ', Time: ' || v_halfDay_time || ', UserID: ' || v_userID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No half-day found for the given date.');
        END;
    END IF;
END;
/



---caling select_halfDay procedar -----

SET SERVEROUTPUT ON;
BEGIN
    select_halfDay('all');
END;
/

                               -------------------------shortLeave CRUD----------------------------------
                               
                               
                               
                               
------Insert shortLeave -------------- 

CREATE OR REPLACE PROCEDURE insert_shortLeave (
    p_shortLeave_time IN shortLeave.shortLeave_time%TYPE,
    p_shortLeave_date IN shortLeave.shortLeave_date%TYPE,
    p_userID IN shortLeave.userID%TYPE
) IS
BEGIN
    INSERT INTO shortLeave (shortLeave_time, shortLeave_date, userID)
    VALUES (p_shortLeave_time, p_shortLeave_date, p_userID);

    COMMIT;
END;
/


---caling insert_shortLeave procedar -----

BEGIN
    insert_shortLeave(SYSTIMESTAMP, SYSDATE, 2);  -- Insert short leave for userID = 1
END;
/

                           
------Update shortLeave-------------- 

CREATE OR REPLACE PROCEDURE update_shortLeave (
    p_shortLeaveID IN shortLeave.shortLeaveID%TYPE,
    p_shortLeave_time IN shortLeave.shortLeave_time%TYPE,
    p_shortLeave_date IN shortLeave.shortLeave_date%TYPE,
    p_userID IN shortLeave.userID%TYPE
) IS
BEGIN
    UPDATE shortLeave
    SET shortLeave_time = p_shortLeave_time,
        shortLeave_date = p_shortLeave_date,
        userID = p_userID
    WHERE shortLeaveID = p_shortLeaveID;

    COMMIT;
END;
/


---caling update_shortLeave procedar -----
BEGIN
    update_shortLeave(1, SYSTIMESTAMP, SYSDATE, 2);  -- Update short leave record with shortLeaveID = 1
END;
/


------Delete shortLeave-------------- 

CREATE OR REPLACE PROCEDURE delete_shortLeave (
    p_shortLeaveID IN shortLeave.shortLeaveID%TYPE
) IS
BEGIN
    DELETE FROM shortLeave
    WHERE shortLeaveID = p_shortLeaveID;

    COMMIT;
END;
/

---caling delete_shortLeave procedar -----
BEGIN
    delete_shortLeave(21);  -- Delete short leave record with shortLeaveID = 1
END;
/

select * from shortLeave;


------Select shortLeave-------------- 

CREATE OR REPLACE PROCEDURE select_shortLeave (
    p_search IN VARCHAR2
) IS
    CURSOR shortLeave_cursor IS
        SELECT shortLeaveID, shortLeave_time, shortLeave_date, userID FROM shortLeave;

    v_shortLeaveID shortLeave.shortLeaveID%TYPE;
    v_shortLeave_time shortLeave.shortLeave_time%TYPE;
    v_shortLeave_date shortLeave.shortLeave_date%TYPE;
    v_userID shortLeave.userID%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN shortLeave_cursor;
        LOOP
            FETCH shortLeave_cursor INTO v_shortLeaveID, v_shortLeave_time, v_shortLeave_date, v_userID;
            EXIT WHEN shortLeave_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('ShortLeave ID: ' || v_shortLeaveID || ', Time: ' || v_shortLeave_time || ', Date: ' || v_shortLeave_date || ', UserID: ' || v_userID);
        END LOOP;
        CLOSE shortLeave_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT shortLeaveID, shortLeave_time, shortLeave_date, userID
            INTO v_shortLeaveID, v_shortLeave_time, v_shortLeave_date, v_userID
            FROM shortLeave
            WHERE userID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('ShortLeave ID: ' || v_shortLeaveID || ', Time: ' || v_shortLeave_time || ', Date: ' || v_shortLeave_date || ', UserID: ' || v_userID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No short leave found for the given user ID.');
        END;

    ELSE
        BEGIN
            SELECT shortLeaveID, shortLeave_time, shortLeave_date, userID
            INTO v_shortLeaveID, v_shortLeave_time, v_shortLeave_date, v_userID
            FROM shortLeave
            WHERE shortLeave_date = TO_DATE(p_search, 'YYYY-MM-DD');
            
            DBMS_OUTPUT.PUT_LINE('ShortLeave ID: ' || v_shortLeaveID || ', Time: ' || v_shortLeave_time || ', Date: ' || v_shortLeave_date || ', UserID: ' || v_userID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No short leave found for the given date.');
        END;
    END IF;
END;
/




---caling select_shortLeave procedar -----

SET SERVEROUTPUT ON;
BEGIN
    select_shortLeave('all');
END;
/


                              -------------------------timetable  CRUD----------------------------------
                               
                               
                               
                               
------Insert timetable -------------- 

CREATE OR REPLACE PROCEDURE insert_timetable (
    p_name IN timetable.name%TYPE,
    p_classID IN timetable.classID%TYPE
) IS
BEGIN
    INSERT INTO timetable (name, classID)
    VALUES (p_name, p_classID);

    COMMIT;
END;
/

---caling insert_timetable procedar -----

BEGIN
    insert_timetable('Morning Timetable', 1);  -- Insert a timetable for classID = 1
END;
/

                           
------Update timetable-------------- 

CREATE OR REPLACE PROCEDURE update_timetable (
    p_timetableID IN timetable.timetableID%TYPE,
    p_name IN timetable.name%TYPE,
    p_classID IN timetable.classID%TYPE
) IS
BEGIN
    UPDATE timetable
    SET name = p_name,
        classID = p_classID
    WHERE timetableID = p_timetableID;

    COMMIT;
END;
/


---caling update_timetable procedar -----
BEGIN
    update_timetable(1, 'Updated Timetable Name', 1);  -- Update timetable with timetableID = 1
END;
/



------Delete timetable-------------- 

CREATE OR REPLACE PROCEDURE delete_timetable (
    p_timetableID IN timetable.timetableID%TYPE
) IS
BEGIN
    DELETE FROM timetable
    WHERE timetableID = p_timetableID;

    COMMIT;
END;
/


---caling delete_timetable procedar -----

BEGIN
    delete_timetable(21);  -- Delete timetable record with timetableID = 1
END;
/


select * from timetable ;


------Select timetable -------------- 

CREATE OR REPLACE PROCEDURE select_timetable (
    p_search IN VARCHAR2
) IS
    CURSOR timetable_cursor IS
        SELECT timetableID, name, classID FROM timetable;

    v_timetableID timetable.timetableID%TYPE;
    v_name timetable.name%TYPE;
    v_classID timetable.classID%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN timetable_cursor;
        LOOP
            FETCH timetable_cursor INTO v_timetableID, v_name, v_classID;
            EXIT WHEN timetable_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Timetable ID: ' || v_timetableID || ', Name: ' || v_name || ', ClassID: ' || v_classID);
        END LOOP;
        CLOSE timetable_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT timetableID, name, classID
            INTO v_timetableID, v_name, v_classID
            FROM timetable
            WHERE classID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Timetable ID: ' || v_timetableID || ', Name: ' || v_name || ', ClassID: ' || v_classID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No timetable found for the given class ID.');
        END;

    ELSE
        BEGIN
            SELECT timetableID, name, classID
            INTO v_timetableID, v_name, v_classID
            FROM timetable
            WHERE name = p_search;
            
            DBMS_OUTPUT.PUT_LINE('Timetable ID: ' || v_timetableID || ', Name: ' || v_name || ', ClassID: ' || v_classID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No timetable found with the given name.');
        END;
    END IF;
END;
/





---caling select_timetable procedar -----

BEGIN
    select_timetable('all');
END;
/

                    ----------------------classSubject CRUD----------------------------------

------Insert classSubject--------------

CREATE OR REPLACE PROCEDURE insert_classSubject (
    p_subjectID IN classSubject.subjectID%TYPE,
    p_classID IN classSubject.classID%TYPE
) IS
BEGIN
    INSERT INTO classSubject (subjectID, classID)
    VALUES (p_subjectID, p_classID);

    COMMIT;
END;
/

---Calling insert_classSubject procedure-----

BEGIN
    insert_classSubject(1,1);  -- Insert a subject with subjectID = 1 into class with classID = 1
END;
/
select * from classSubject;
------Update classSubject--------------

CREATE OR REPLACE PROCEDURE update_classSubject (
    p_old_subjectID IN classSubject.subjectID%TYPE,
    p_old_classID IN classSubject.classID%TYPE,
    p_new_subjectID IN classSubject.subjectID%TYPE,
    p_new_classID IN classSubject.classID%TYPE
) IS
BEGIN
    UPDATE classSubject
    SET subjectID = p_new_subjectID,
        classID = p_new_classID
    WHERE subjectID = p_old_subjectID AND classID = p_old_classID;

    COMMIT;
END;
/

---Calling update_classSubject procedure-----

BEGIN
    update_classSubject(1, 1, 1, 1);  -- Update classSubject to associate subjectID = 2 with classID = 1
END;
/

------Delete classSubject--------------

CREATE OR REPLACE PROCEDURE delete_classSubject (
    p_subjectID IN classSubject.subjectID%TYPE,
    p_classID IN classSubject.classID%TYPE
) IS
BEGIN
    DELETE FROM classSubject
    WHERE subjectID = p_subjectID AND classID = p_classID;

    COMMIT;
END;
/

---Calling delete_classSubject procedure-----

BEGIN
    delete_classSubject(1, 1);  -- Delete record where subjectID = 1 and classID = 1
END;
/

------Select classSubject--------------

CREATE OR REPLACE PROCEDURE select_classSubject (
    p_search IN VARCHAR2
) IS
    CURSOR classSubject_cursor IS
        SELECT subjectID, classID FROM classSubject;

    v_subjectID classSubject.subjectID%TYPE;
    v_classID classSubject.classID%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN classSubject_cursor;
        LOOP
            FETCH classSubject_cursor INTO v_subjectID, v_classID;
            EXIT WHEN classSubject_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Subject ID: ' || v_subjectID || ', Class ID: ' || v_classID);
        END LOOP;
        CLOSE classSubject_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT subjectID, classID
            INTO v_subjectID, v_classID
            FROM classSubject
            WHERE classID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Subject ID: ' || v_subjectID || ', Class ID: ' || v_classID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No records found for the given class ID.');
        END;

    ELSE
        BEGIN
            SELECT subjectID, classID
            INTO v_subjectID, v_classID
            FROM classSubject
            WHERE subjectID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Subject ID: ' || v_subjectID || ', Class ID: ' || v_classID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No records found with the given subject ID.');
        END;
    END IF;
END;
/

---Calling select_classSubject procedure-----
SET SERVEROUTPUT ON;
BEGIN
    select_classSubject('all');  -- Fetch all records
END;
/


                        --------------------subjectTeacher CRUD--------------------------

------Insert subjectTeacher--------------

CREATE OR REPLACE PROCEDURE insert_subjectTeacher (
    p_subjectID IN subjectTeacher.subjectID%TYPE,
    p_teacherID IN subjectTeacher.teacherID%TYPE
) IS
BEGIN
    INSERT INTO subjectTeacher (subjectID, teacherID)
    VALUES (p_subjectID, p_teacherID);

    COMMIT;
END;
/

---Calling insert_subjectTeacher procedure-----

BEGIN
    insert_subjectTeacher(1, 1);  -- Insert a subject with subjectID = 1 assigned to teacherID = 1
END;
/

------Update subjectTeacher--------------

CREATE OR REPLACE PROCEDURE update_subjectTeacher (
    p_old_subjectID IN subjectTeacher.subjectID%TYPE,
    p_old_teacherID IN subjectTeacher.teacherID%TYPE,
    p_new_subjectID IN subjectTeacher.subjectID%TYPE,
    p_new_teacherID IN subjectTeacher.teacherID%TYPE
) IS
BEGIN
    UPDATE subjectTeacher
    SET subjectID = p_new_subjectID,
        teacherID = p_new_teacherID
    WHERE subjectID = p_old_subjectID AND teacherID = p_old_teacherID;

    COMMIT;
END;
/

---Calling update_subjectTeacher procedure-----

BEGIN
    update_subjectTeacher(1, 1, 1, 1);  -- Update the subject assigned to teacherID = 1 from subjectID = 1 to subjectID = 2
END;
/

------Delete subjectTeacher--------------

CREATE OR REPLACE PROCEDURE delete_subjectTeacher (
    p_subjectID IN subjectTeacher.subjectID%TYPE,
    p_teacherID IN subjectTeacher.teacherID%TYPE
) IS
BEGIN
    DELETE FROM subjectTeacher
    WHERE subjectID = p_subjectID AND teacherID = p_teacherID;

    COMMIT;
END;
/

---Calling delete_subjectTeacher procedure-----

BEGIN
    delete_subjectTeacher(1, 1);  -- Delete the assignment where subjectID = 1 and teacherID = 1
END;
/

------Select subjectTeacher--------------

CREATE OR REPLACE PROCEDURE select_subjectTeacher (
    p_search IN VARCHAR2
) IS
    CURSOR subjectTeacher_cursor IS
        SELECT subjectID, teacherID FROM subjectTeacher;

    v_subjectID subjectTeacher.subjectID%TYPE;
    v_teacherID subjectTeacher.teacherID%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN subjectTeacher_cursor;
        LOOP
            FETCH subjectTeacher_cursor INTO v_subjectID, v_teacherID;
            EXIT WHEN subjectTeacher_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Subject ID: ' || v_subjectID || ', Teacher ID: ' || v_teacherID);
        END LOOP;
        CLOSE subjectTeacher_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT subjectID, teacherID
            INTO v_subjectID, v_teacherID
            FROM subjectTeacher
            WHERE teacherID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Subject ID: ' || v_subjectID || ', Teacher ID: ' || v_teacherID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No records found for the given teacher ID.');
        END;

    ELSE
        BEGIN
            SELECT subjectID, teacherID
            INTO v_subjectID, v_teacherID
            FROM subjectTeacher
            WHERE subjectID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Subject ID: ' || v_subjectID || ', Teacher ID: ' || v_teacherID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No records found for the given subject ID.');
        END;
    END IF;
END;
/

---Calling select_subjectTeacher procedure-----

BEGIN
    select_subjectTeacher('all');  -- Fetch all records
END;
/


                    -----------------classTeacher CRUD----------------------------------

------Insert classTeacher--------------

CREATE OR REPLACE PROCEDURE insert_classTeacher (
    p_classID IN classTeacher.classID%TYPE,
    p_teacherID IN classTeacher.teacherID%TYPE
) IS
BEGIN
    INSERT INTO classTeacher (classID, teacherID)
    VALUES (p_classID, p_teacherID);

    COMMIT;
END;
/

---Calling insert_classTeacher procedure-----

BEGIN
    insert_classTeacher(1, 1);  -- Insert a teacher with teacherID = 1 assigned to classID = 1
END;
/
select * from classTeacher;
------Update classTeacher--------------

CREATE OR REPLACE PROCEDURE update_classTeacher (
    p_old_classID IN classTeacher.classID%TYPE,
    p_old_teacherID IN classTeacher.teacherID%TYPE,
    p_new_classID IN classTeacher.classID%TYPE,
    p_new_teacherID IN classTeacher.teacherID%TYPE
) IS
BEGIN
    UPDATE classTeacher
    SET classID = p_new_classID,
        teacherID = p_new_teacherID
    WHERE classID = p_old_classID AND teacherID = p_old_teacherID;

    COMMIT;
END;
/

---Calling update_classTeacher procedure-----

BEGIN
    update_classTeacher(1, 1, 1, 1);  -- Update the class assigned to teacherID = 1 from classID = 1 to classID = 2
END;
/

------Delete classTeacher--------------

CREATE OR REPLACE PROCEDURE delete_classTeacher (
    p_classID IN classTeacher.classID%TYPE,
    p_teacherID IN classTeacher.teacherID%TYPE
) IS
BEGIN
    DELETE FROM classTeacher
    WHERE classID = p_classID AND teacherID = p_teacherID;

    COMMIT;
END;
/

---Calling delete_classTeacher procedure-----

BEGIN
    delete_classTeacher(1, 1);  -- Delete the assignment where classID = 1 and teacherID = 1
END;
/

------Select classTeacher--------------

CREATE OR REPLACE PROCEDURE select_classTeacher (
    p_search IN VARCHAR2
) IS
    CURSOR classTeacher_cursor IS
        SELECT classID, teacherID FROM classTeacher;

    v_classID classTeacher.classID%TYPE;
    v_teacherID classTeacher.teacherID%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN classTeacher_cursor;
        LOOP
            FETCH classTeacher_cursor INTO v_classID, v_teacherID;
            EXIT WHEN classTeacher_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Class ID: ' || v_classID || ', Teacher ID: ' || v_teacherID);
        END LOOP;
        CLOSE classTeacher_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT classID, teacherID
            INTO v_classID, v_teacherID
            FROM classTeacher
            WHERE teacherID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Class ID: ' || v_classID || ', Teacher ID: ' || v_teacherID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No records found for the given teacher ID.');
        END;

    ELSE
        BEGIN
            SELECT classID, teacherID
            INTO v_classID, v_teacherID
            FROM classTeacher
            WHERE classID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Class ID: ' || v_classID || ', Teacher ID: ' || v_teacherID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No records found for the given class ID.');
        END;
    END IF;
END;
/

---Calling select_classTeacher procedure-----

BEGIN
    select_classTeacher('all');  -- Fetch all records
END;
/


                        -------------------------eventTimetable CRUD----------------------------------

------Insert eventTimetable--------------

CREATE OR REPLACE PROCEDURE insert_eventTimetable (
    p_eventID IN eventTimetable.eventID%TYPE,
    p_timetableID IN eventTimetable.timetableID%TYPE,
    p_eventTimetable_date IN eventTimetable.eventTimetable_date%TYPE
) IS
BEGIN
    INSERT INTO eventTimetable (eventID, timetableID, eventTimetable_date)
    VALUES (p_eventID, p_timetableID, p_eventTimetable_date);

    COMMIT;
END;
/

---Calling insert_eventTimetable procedure-----

BEGIN
    insert_eventTimetable(1, 1, SYSDATE);  -- Insert an eventTimetable record with eventID = 1, timetableID = 1, and today's date
END;
/

------Update eventTimetable--------------

CREATE OR REPLACE PROCEDURE update_eventTimetable (
    p_old_eventID IN eventTimetable.eventID%TYPE,
    p_old_timetableID IN eventTimetable.timetableID%TYPE,
    p_new_eventID IN eventTimetable.eventID%TYPE,
    p_new_timetableID IN eventTimetable.timetableID%TYPE,
    p_new_eventTimetable_date IN eventTimetable.eventTimetable_date%TYPE
) IS
BEGIN
    UPDATE eventTimetable
    SET eventID = p_new_eventID,
        timetableID = p_new_timetableID,
        eventTimetable_date = p_new_eventTimetable_date
    WHERE eventID = p_old_eventID AND timetableID = p_old_timetableID;

    COMMIT;
END;
/

---Calling update_eventTimetable procedure-----

BEGIN
    update_eventTimetable(1, 1, 1, 1, SYSDATE);  -- Update eventTimetable with eventID = 1 and timetableID = 1
END;
/

------Delete eventTimetable--------------

CREATE OR REPLACE PROCEDURE delete_eventTimetable (
    p_eventID IN eventTimetable.eventID%TYPE,
    p_timetableID IN eventTimetable.timetableID%TYPE
) IS
BEGIN
    DELETE FROM eventTimetable
    WHERE eventID = p_eventID AND timetableID = p_timetableID;

    COMMIT;
END;
/

---Calling delete_eventTimetable procedure-----

BEGIN
    delete_eventTimetable(1, 1);  -- Delete eventTimetable record where eventID = 1 and timetableID = 1
END;
/

------Select eventTimetable--------------

CREATE OR REPLACE PROCEDURE select_eventTimetable (
    p_search IN VARCHAR2
) IS
    CURSOR eventTimetable_cursor IS
        SELECT eventID, timetableID, eventTimetable_date FROM eventTimetable;

    v_eventID eventTimetable.eventID%TYPE;
    v_timetableID eventTimetable.timetableID%TYPE;
    v_eventTimetable_date eventTimetable.eventTimetable_date%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN eventTimetable_cursor;
        LOOP
            FETCH eventTimetable_cursor INTO v_eventID, v_timetableID, v_eventTimetable_date;
            EXIT WHEN eventTimetable_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Event ID: ' || v_eventID || ', Timetable ID: ' || v_timetableID || ', Date: ' || v_eventTimetable_date);
        END LOOP;
        CLOSE eventTimetable_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT eventID, timetableID, eventTimetable_date
            INTO v_eventID, v_timetableID, v_eventTimetable_date
            FROM eventTimetable
            WHERE eventID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Event ID: ' || v_eventID || ', Timetable ID: ' || v_timetableID || ', Date: ' || v_eventTimetable_date);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No record found for the given event ID.');
        END;

    ELSE
        BEGIN
            SELECT eventID, timetableID, eventTimetable_date
            INTO v_eventID, v_timetableID, v_eventTimetable_date
            FROM eventTimetable
            WHERE timetableID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Event ID: ' || v_eventID || ', Timetable ID: ' || v_timetableID || ', Date: ' || v_eventTimetable_date);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No record found for the given timetable ID.');
        END;
    END IF;
END;
/

---Calling select_eventTimetable procedure-----
SET SERVEROUTPUT ON;
BEGIN
    select_eventTimetable('all');  -- Fetch all records
END;
/



                        -------------------------relifeClass CRUD----------------------------------

------Insert relifeClass--------------

CREATE OR REPLACE PROCEDURE insert_relifeClass (
    p_classID IN relifeClass.classID%TYPE,
    p_relifeID IN relifeClass.relifeID%TYPE,
    p_relifeClass_date IN relifeClass.relifeClass_date%TYPE,
    p_relifeClass_time IN relifeClass.relifeClass_time%TYPE
) IS
BEGIN
    INSERT INTO relifeClass (classID, relifeID, relifeClass_date, relifeClass_time)
    VALUES (p_classID, p_relifeID, p_relifeClass_date, p_relifeClass_time);

    COMMIT;
END;
/

---Calling insert_relifeClass procedure-----

BEGIN
    insert_relifeClass(1, 1, SYSDATE, SYSTIMESTAMP);  -- Insert a relifeClass record
END;
/

------Update relifeClass--------------

CREATE OR REPLACE PROCEDURE update_relifeClass (
    p_old_classID IN relifeClass.classID%TYPE,
    p_old_relifeID IN relifeClass.relifeID%TYPE,
    p_new_classID IN relifeClass.classID%TYPE,
    p_new_relifeID IN relifeClass.relifeID%TYPE,
    p_new_relifeClass_date IN relifeClass.relifeClass_date%TYPE,
    p_new_relifeClass_time IN relifeClass.relifeClass_time%TYPE
) IS
BEGIN
    UPDATE relifeClass
    SET classID = p_new_classID,
        relifeID = p_new_relifeID,
        relifeClass_date = p_new_relifeClass_date,
        relifeClass_time = p_new_relifeClass_time
    WHERE classID = p_old_classID AND relifeID = p_old_relifeID;

    COMMIT;
END;
/

---Calling update_relifeClass procedure-----

BEGIN
    update_relifeClass(1, 1, 1, 1, SYSDATE, SYSTIMESTAMP);  -- Update relifeClass with classID = 1 and relifeID = 1
END;
/

------Delete relifeClass--------------

CREATE OR REPLACE PROCEDURE delete_relifeClass (
    p_classID IN relifeClass.classID%TYPE,
    p_relifeID IN relifeClass.relifeID%TYPE
) IS
BEGIN
    DELETE FROM relifeClass
    WHERE classID = p_classID AND relifeID = p_relifeID;

    COMMIT;
END;
/

---Calling delete_relifeClass procedure-----

BEGIN
    delete_relifeClass(1, 1);  -- Delete relifeClass record where classID = 1 and relifeID = 1
END;
/

------Select relifeClass--------------

CREATE OR REPLACE PROCEDURE select_relifeClass (
    p_search IN VARCHAR2
) IS
    CURSOR relifeClass_cursor IS
        SELECT classID, relifeID, relifeClass_date, relifeClass_time FROM relifeClass;

    v_classID relifeClass.classID%TYPE;
    v_relifeID relifeClass.relifeID%TYPE;
    v_relifeClass_date relifeClass.relifeClass_date%TYPE;
    v_relifeClass_time relifeClass.relifeClass_time%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN relifeClass_cursor;
        LOOP
            FETCH relifeClass_cursor INTO v_classID, v_relifeID, v_relifeClass_date, v_relifeClass_time;
            EXIT WHEN relifeClass_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Class ID: ' || v_classID || ', Relife ID: ' || v_relifeID || ', Date: ' || v_relifeClass_date || ', Time: ' || v_relifeClass_time);
        END LOOP;
        CLOSE relifeClass_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT classID, relifeID, relifeClass_date, relifeClass_time
            INTO v_classID, v_relifeID, v_relifeClass_date, v_relifeClass_time
            FROM relifeClass
            WHERE classID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Class ID: ' || v_classID || ', Relife ID: ' || v_relifeID || ', Date: ' || v_relifeClass_date || ', Time: ' || v_relifeClass_time);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No record found for the given class ID.');
        END;

    ELSE
        BEGIN
            SELECT classID, relifeID, relifeClass_date, relifeClass_time
            INTO v_classID, v_relifeID, v_relifeClass_date, v_relifeClass_time
            FROM relifeClass
            WHERE relifeID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Class ID: ' || v_classID || ', Relife ID: ' || v_relifeID || ', Date: ' || v_relifeClass_date || ', Time: ' || v_relifeClass_time);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No record found for the given relife ID.');
        END;
    END IF;
END;
/

---Calling select_relifeClass procedure-----

BEGIN
    select_relifeClass('all');  -- Fetch all records
END;
/


             -------------------------period CRUD----------------------------------

------Insert period--------------

CREATE OR REPLACE PROCEDURE insert_period (
    p_name IN period.name%TYPE,
    p_time IN period.time%TYPE,
    p_timetableID IN period.timetableID%TYPE
) IS
BEGIN
    INSERT INTO period (name, time, timetableID)
    VALUES (p_name, p_time, p_timetableID);

    COMMIT;
END;
/

---Calling insert_period procedure-----

BEGIN
    insert_period('Math', TO_TIMESTAMP('10:00:00', 'HH24:MI:SS'), 1);  -- Insert a period for timetableID = 1
END;
/


------Update period--------------

CREATE OR REPLACE PROCEDURE update_period (
    p_periodID IN period.periodID%TYPE,
    p_name IN period.name%TYPE,
    p_time IN period.time%TYPE,
    p_timetableID IN period.timetableID%TYPE
) IS
BEGIN
    UPDATE period
    SET name = p_name,
        time = p_time,
        timetableID = p_timetableID
    WHERE periodID = p_periodID;

    COMMIT;
END;
/

---Calling update_period procedure-----

BEGIN
    update_period(1, 'Updated Period', SYSTIMESTAMP, 2);  -- Update period with periodID = 1
END;
/


------Delete period--------------

CREATE OR REPLACE PROCEDURE delete_period (
    p_periodID IN period.periodID%TYPE
) IS
BEGIN
    DELETE FROM period
    WHERE periodID = p_periodID;

    COMMIT;
END;
/

---Calling delete_period procedure-----

BEGIN
    delete_period(1);  -- Delete period record with periodID = 1
END;
/

------Select period--------------

CREATE OR REPLACE PROCEDURE select_period (
    p_search IN VARCHAR2
) IS
    CURSOR period_cursor IS
        SELECT periodID, name, time, timetableID FROM period;

    v_periodID period.periodID%TYPE;
    v_name period.name%TYPE;
    v_time period.time%TYPE;
    v_timetableID period.timetableID%TYPE;

BEGIN
    IF p_search = 'all' THEN
        OPEN period_cursor;
        LOOP
            FETCH period_cursor INTO v_periodID, v_name, v_time, v_timetableID;
            EXIT WHEN period_cursor%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE('Period ID: ' || v_periodID || ', Name: ' || v_name || ', Time: ' || v_time || ', Timetable ID: ' || v_timetableID);
        END LOOP;
        CLOSE period_cursor;

    ELSIF REGEXP_LIKE(p_search, '^[0-9]+$') THEN
        BEGIN
            SELECT periodID, name, time, timetableID
            INTO v_periodID, v_name, v_time, v_timetableID
            FROM period
            WHERE periodID = TO_NUMBER(p_search);
            
            DBMS_OUTPUT.PUT_LINE('Period ID: ' || v_periodID || ', Name: ' || v_name || ', Time: ' || v_time || ', Timetable ID: ' || v_timetableID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No period found with the given ID.');
        END;

    ELSE
        BEGIN
            SELECT periodID, name, time, timetableID
            INTO v_periodID, v_name, v_time, v_timetableID
            FROM period
            WHERE name = p_search;
            
            DBMS_OUTPUT.PUT_LINE('Period ID: ' || v_periodID || ', Name: ' || v_name || ', Time: ' || v_time || ', Timetable ID: ' || v_timetableID);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('No period found with the given name.');
        END;
    END IF;
END;
/

---Calling select_period procedure-----

BEGIN
    select_period('all');  -- Fetch all periods
END;
/




                     ----------------------------------Reports --------------------------------------- 
                     
----Report on Teacher Attendanc-----
                        
SELECT t.name AS teacher_name,
       COUNT(a.attendance_date) AS total_attendances,
       SUM(CASE WHEN a.attendance_date IS NULL THEN 1 ELSE 0 END) AS missed_attendance,
       ROUND((COUNT(a.attendance_date) / (SYSDATE - ADD_MONTHS(SYSDATE, -1))) * 100, 2) AS attendance_percentage
FROM teacher t
LEFT JOIN attendance a ON t.userID = a.userID
AND a.attendance_date BETWEEN ADD_MONTHS(SYSDATE, -1) AND SYSDATE
GROUP BY t.name
ORDER BY attendance_percentage DESC;

------Report Short Leave---------

CREATE OR REPLACE PROCEDURE report_shortLeave AS
  CURSOR c_shortLeave IS
    SELECT shortLeaveID, shortLeave_date, shortLeave_time, userID FROM shortLeave;
  
  rec_shortLeave c_shortLeave%ROWTYPE;
  total_shortLeaves NUMBER := 0;

BEGIN
  DBMS_OUTPUT.PUT_LINE('Short Leave Report:');
  DBMS_OUTPUT.PUT_LINE('---------------------------------------');
  
  OPEN c_shortLeave;
  LOOP
    FETCH c_shortLeave INTO rec_shortLeave;
    EXIT WHEN c_shortLeave%NOTFOUND;

    total_shortLeaves := total_shortLeaves + 1;

    DBMS_OUTPUT.PUT_LINE('Short Leave ID: ' || rec_shortLeave.shortLeaveID || 
                         ', Date: ' || rec_shortLeave.shortLeave_date || 
                         ', Time: ' || rec_shortLeave.shortLeave_time || 
                         ', User ID: ' || rec_shortLeave.userID);
  END LOOP;
  CLOSE c_shortLeave;

  DBMS_OUTPUT.PUT_LINE('---------------------------------------');
  DBMS_OUTPUT.PUT_LINE('Total Short Leaves: ' || total_shortLeaves);
END report_shortLeave;
/
SET SERVEROUTPUT ON;
EXEC report_shortLeave;


-----Report TimeTable-----

CREATE OR REPLACE PROCEDURE report_timetable AS
  CURSOR c_timetable IS
    SELECT t.timetableID, t.name, t.classID, c.name AS class_name
    FROM timetable t
    JOIN class c ON t.classID = c.classID; -- Join with class to get class.name
  
  rec_timetable c_timetable%ROWTYPE;
  total_timetables NUMBER := 0;

BEGIN
  DBMS_OUTPUT.PUT_LINE('Timetable Report:');
  DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------');
  
  OPEN c_timetable;
  LOOP
    FETCH c_timetable INTO rec_timetable;
    EXIT WHEN c_timetable%NOTFOUND;

    total_timetables := total_timetables + 1;

    DBMS_OUTPUT.PUT_LINE('Timetable ID: ' || rec_timetable.timetableID || 
                         ', Timetable Name: ' || rec_timetable.name || -- Timetable name
                         ', Class ID: ' || rec_timetable.classID ||
                         ', Class Name: ' || rec_timetable.class_name); -- Class name
  END LOOP;
  CLOSE c_timetable;

  DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------');
  DBMS_OUTPUT.PUT_LINE('Total Timetables: ' || total_timetables);
END report_timetable;
/
SET SERVEROUTPUT ON;
EXEC report_timetable;

                         ----------------------------------Triger --------------------------------------- 


select * from admin;
-----ensure email is unique before inserting or updating---

CREATE OR REPLACE TRIGGER trg_admin_email_unique
BEFORE INSERT OR UPDATE ON admin
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    -- Check if email already exists in the table
    SELECT COUNT(*) INTO v_count
    FROM admin
    WHERE email = :NEW.email;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Email must be unique');
    END IF;
END trg_admin_email_unique;
/

----Trigger for checking unique password----

CREATE OR REPLACE TRIGGER trg_admin_password_unique
BEFORE INSERT OR UPDATE ON admin
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    -- Check if the password already exists in the table
    SELECT COUNT(*) INTO v_count
    FROM admin
    WHERE password = :NEW.password;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Password already taken');
    END IF;
END trg_admin_password_unique;
/


CREATE OR REPLACE TRIGGER trg_prevent_event_period_overlap
BEFORE INSERT OR UPDATE ON event
FOR EACH ROW
DECLARE
    v_overlap NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_overlap
    FROM period p
    JOIN timetable t ON p.timetableID = t.timetableID
    WHERE t.classID = :NEW.classID
    AND :NEW.event_time BETWEEN p.time AND (p.time + INTERVAL '1' HOUR);

    IF v_overlap > 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'Event time overlaps with an existing period.');
    END IF;
END;



CREATE OR REPLACE TRIGGER trg_update_leave_count
AFTER INSERT ON shortLeave
FOR EACH ROW
BEGIN
    UPDATE teacher SET leave_count = leave_count + 1
    WHERE teacherID = :NEW.userID;
END;



CREATE OR REPLACE TRIGGER trg_update_leave_count
AFTER INSERT ON shortLeave
FOR EACH ROW
BEGIN
    UPDATE teacher
    SET leave_count = leave_count + 1
    WHERE teacherID = :NEW.userID;
END;

select * from teacher;


SELECT
    t.name AS TeacherName,
    s.subject_time AS SubjectTime,
    sub.subject_date AS SubjectDate,
    c.name AS ClassName
FROM
    teacher t
INNER JOIN
    subjectTeacher st ON t.teacherID = st.teacherID
INNER JOIN
    subject sub ON st.subjectID = sub.subjectID
INNER JOIN
    class c ON sub.classID = c.classID
WHERE
    sub.subject_date = TO_DATE('2024-10-10', 'YYYY-MM-DD'); -- Replace with the desired date







select * from class;






